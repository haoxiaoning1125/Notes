获取仓库: 
    git init(本地新建)
    git clone [url](克隆现有)
    git clone --bare: 创建一个没有工作目录的git仓库副本

新建分支: git branch [name]
查看状态: git status (used before add or commit)

跟踪文件: git add [filename], git add .
    git add: 跟踪新文件, 
             把已跟踪文件放入暂存区,
             合并时将冲突文件标记为已解决

暂存改动: git stash
    git stash: 将文件暂存
    git stash save [message]: 暂存并添加备注
    git stash list: 查看有哪些暂存
    git stash show: 显示做了哪些改动, 默认显示第一个暂存, 
        git stash show stash@{[num]}
    git stash show -p: 显示第一个暂存的改动, 
        git stash show stash@{[num]} -p 
    git stash apply: 应用某个存储, 默认第一个, 
        git stash apply stash@{[num]}
    git stash pop: 恢复之前缓存的工作目录, 
        git stash pop stash@{[num]}
    git stash drop: 丢弃暂存, 
        git stash drop stash@{[num]}
    git stash clear: 清除所有暂存

显示对象: git show
    git show [commit_id]: 显示某次提交的改动

查看文件变化: git diff
    git diff: 查看未暂存文件的更新
    git diff --cached: 查看已暂存文件和上次提交时的差异
    git diff --staged: 查看下一次commit时会提交到HEAD的内容
    git diff HEAD: 显示working tree和HEAD的差别
    git diff [b1] [b2]: 对比分支b1和b2的最新提交
    git diff [sha1] [sha2]: 对比两个历史版本的差别
    git diff --stat: 查看简单的diff结果

提交更新: git commit
    git commit -m: 信息和命令在同一行 
    git commit -a: 跳过add, 将所有跟踪过的文件全部提交
    git commit --amend: 重新提交

移除文件: git rm
    git rm --cached [file]: 取消git跟踪, 保留本地文件
    git rm --f [file]: 取消git跟踪, 删除本地文件
    git rm -r --cached .
    git rm -r --f .

移动文件: git mv
    git mv [file_from] [file_to]
    等价于: mv [file_from] [file_to]
            git rm [file_from]
            git add [file_to]

查看提交历史: git log
    git log -p: 显示每次提交的内容差异
    git log -p -[n]: 显示最近n次提交的内容差异
    git log --stat: 每次提交的简略统计信息
    git log --pretty=[n]: 使用不同于默认格式的方式展示
        n == oneline: 显示一行
        n == format:"%h - %an, %ar : %s": 定制格式
    git log --graph: 图形化展示
    git log --since=[n]: 最近一段时间的提交
        n == 2.years: 最近两年
        n == 2.months/2.weeks/2.days/2.hours: ...
        n == 2019-10-1: 2019-10-1 之后的提交
    git log -S[str]: 添加或删除了字符串str的提交

回退版本:
    未add, 回滚一个文件:
        git checkout -- [file]
        <!拉取暂存取文件, 替换工作区文件>
    已经add, 回滚一个文件:
        git reset [file]
        git reset [commit] [file]
        git reset HEAD [file]
        <!取消文件暂存, 保留修改>
    已经add, 回滚整个工程:
        git reset --hard [commit]
        <!重置缓存区和工作目录的修改>
    已经commit, 回滚整个工程:
        git revert -n [commit] 
        <!产生新的提交, 不删除原log>

查看远程仓库: git remote
    git remote show origin
    git ls-remote: 获取远程引用的完整列表
    git remote -v: 显示简写和url
    git remote add [short_name] [url]: 添加一个远程仓库并指定简写
    git remote show [remote_name]: 查看远程仓库详细信息
    git remote rename [old] [new]: 远程仓库重命名
    git remote rm [remote_name]: 移除远程仓库
    git fetch [remote_name]: 从远程仓库拉取所有本地没有的数据
    git pull: 从服务器抓取数据并自动尝试合并到当前所在的分支
    git push [remote_name] [branch_name]: 将本地commit提交到远程仓库
    git push error: failed to push some refs to git
        原因: 文件缺失
        解决: git pull --rebase origin/master
              git push
    git push --set-upstream origin master: 首次将代码推到远程仓库
    
标签: git tag
    git tag: 列出当前仓库所有标签
    git tag -a [tag_name] -m [message]: 创建附注标签
    git tag -a [tag_name] [commit_name]: 给指定的commit打标签
    git checkout [tag_name]: 切换标签
    git tag -d [tag_name]: 删除标签
        
创建分支: git branch [b_name]
    git branch: 查看当前分支
    git branch -d [b_name]: 删除分支, -D: 强制删除
    git branch -v: 查看每个分支的最后一次提交
    git branch --merged: 查看哪些分支已合并到当前分支
    git branch --not-merged: 查看所有包含未合并工作的分支
    git branch -m [b1] [b2]: 将分支b1重命名为b2
切换分支: git checkout [b_name]
合并分支: git checkout [b_name_1]
          git merge [b_name_2]
分支合并冲突: 
    git status: 查看冲突的文件
    cat [f]
    解决冲突
    git add [f]: 将冲突的文件标记为已解决
    git commit -m 'confilct fixed'
放弃分支合并: git merge --abort

变基: git rebase
    git rebase [b_name]: 将分支b_name上的修改应用在当前分支
    git rebase [b1] [b2]: 将b2上的修改应用于b1
    git rebase --onto [master] [server] [client]:
        找出处于client分支和server分支的共同祖先之后的修改,
        然后把它们在master分支上重做一遍,
        等价于: | git checkout master
                | git merge client
                | git rebase master server
    !!!不要对仓库外有副本的分支进行变基!!!

回退单个文件:
    git reset [commit] [file], git checkout [file]

git reset:
    --mixed: 不删除工作空间改动, 撤销commit, 撤销add
             git reset --mixed HEAD^ 等同于 git reset HEAD^
    --soft: 不删除工作空间改动, 撤销commit, 不撤销add
    --hard: 删除工作空间改动, 撤销commit, 撤销add

放弃未add的修改: git checkout 'filename'
                 git checkout .

比较两个分支的差异:
    git log dev ^master (查看dev有,而master没有的)
    git log master..dev (查看dev比master多提交了哪些内容)
    git log dev...master (对比两分支不同)
    git log --left-right dev...master(对比两分支不同并显示各提交的分支)

查看配置: git config --list
          git config --system --list (系统配置)
          git config --global --list (当前用户配置)
          git config --local --list (当前仓库配置)

切换到某次提交: 
    git checkout [commit] [file]: 将file切换到commit版本
    git checkout [commit]: 将整个工作目录切换到commit版本

回滚错误的合并:
    init -> v1 -> v2 -> v3 -- faulty merge -> v4 -> vc3(master)
        \  \            /                     /
         \  d1  -->  d2  --> d3 --> d4(dev)  /
          \                                 / 
           c1  -->  c2 -------------------c3(other)
    d2和v3的合并引入bug
    git revert [commit] -m [1|2] , (1: v3, 2: d2)
    提交历史变为:
    init -> v1 -> v2 -> v3 -- faulty merge -> v4 -> vc3 -> rev3 (master)
          \            /
           d1  -->  d2  --> d3 --> d4  (dev)

上传代码到github:
    第一次:
        git remote add origin [git_address(https)]
        git push -u origin master
    之后:
        git push
